# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:48:26+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AmazonResourceName(
    RootModel[
        constr(
            pattern=r'^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-z0-9-]+:\d{12}:datastore\/fhir\/.{32}',
            min_length=1,
            max_length=1011,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-z0-9-]+:\d{12}:datastore\/fhir\/.{32}',
        min_length=1,
        max_length=1011,
    )


class BoundedLengthString(
    RootModel[constr(pattern=r'[\P{M}\p{M}]{1,5000}', min_length=1, max_length=5000)]
):
    root: constr(pattern=r'[\P{M}\p{M}]{1,5000}', min_length=1, max_length=5000)


class ClientTokenString(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)


class CmkType(Enum):
    CUSTOMER_MANAGED_KMS_KEY = 'CUSTOMER_MANAGED_KMS_KEY'
    AWS_OWNED_KMS_KEY = 'AWS_OWNED_KMS_KEY'


class ConflictException(RootModel[Any]):
    root: Any


class DatastoreArn(
    RootModel[
        constr(
            pattern=r'^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-zA-Z0-9-]+:[0-9]{12}:datastore/.+?'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-zA-Z0-9-]+:[0-9]{12}:datastore/.+?'
    )


class DatastoreId(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=32)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=32
    )


class DatastoreName(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=256
    )


class DatastoreStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class DeleteFHIRDatastoreRequest(BaseModel):
    DatastoreId_1: Optional[DatastoreId] = Field(None, alias='DatastoreId')


class DeleteFHIRDatastoreResponse(BaseModel):
    DatastoreArn_1: DatastoreArn = Field(..., alias='DatastoreArn')
    DatastoreEndpoint: BoundedLengthString
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    DatastoreStatus_1: DatastoreStatus = Field(..., alias='DatastoreStatus')


class DescribeFHIRDatastoreRequest(BaseModel):
    DatastoreId_1: Optional[DatastoreId] = Field(None, alias='DatastoreId')


class EncryptionKeyID(
    RootModel[
        constr(
            pattern=r'(arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\d:)?(\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))',
            min_length=1,
            max_length=400,
        )
    ]
):
    root: constr(
        pattern=r'(arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\d:)?(\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))',
        min_length=1,
        max_length=400,
    )


class FHIRVersion(Enum):
    R4 = 'R4'


class IamRoleArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
        min_length=20,
        max_length=2048,
    )


class InternalServerException(RootModel[Any]):
    root: Any


class JobId(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=32)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=32
    )


class JobName(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=64)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=64
    )


class JobStatus(Enum):
    SUBMITTED = 'SUBMITTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED_WITH_ERRORS = 'COMPLETED_WITH_ERRORS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class KmsEncryptionConfig(BaseModel):
    CmkType_1: CmkType = Field(..., alias='CmkType')
    KmsKeyId: Optional[EncryptionKeyID] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName


class MaxResultsInteger(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class Message(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=2048
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=2048
    )


class NextToken(RootModel[constr(pattern=r'\p{ASCII}{0,8192}', max_length=8192)]):
    root: constr(pattern=r'\p{ASCII}{0,8192}', max_length=8192)


class PreloadDataType(Enum):
    SYNTHEA = 'SYNTHEA'


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class S3Uri(
    RootModel[
        constr(
            pattern=r's3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?', max_length=1024
        )
    ]
):
    root: constr(
        pattern=r's3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?', max_length=1024
    )


class SseConfiguration(BaseModel):
    KmsEncryptionConfig_1: KmsEncryptionConfig = Field(..., alias='KmsEncryptionConfig')


class StartFHIRExportJobResponse(BaseModel):
    DatastoreId_1: Optional[DatastoreId] = Field(None, alias='DatastoreId')
    JobId_1: JobId = Field(..., alias='JobId')
    JobStatus_1: JobStatus = Field(..., alias='JobStatus')


class StartFHIRImportJobResponse(BaseModel):
    DatastoreId_1: Optional[DatastoreId] = Field(None, alias='DatastoreId')
    JobId_1: JobId = Field(..., alias='JobId')
    JobStatus_1: JobStatus = Field(..., alias='JobStatus')


class String(RootModel[constr(pattern=r'[\P{M}\p{M}]{0,10000}', max_length=10000)]):
    root: constr(pattern=r'[\P{M}\p{M}]{0,10000}', max_length=10000)


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class UntagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    HealthLake_CreateFHIRDatastore = 'HealthLake.CreateFHIRDatastore'


class XAmzTarget1(Enum):
    HealthLake_DeleteFHIRDatastore = 'HealthLake.DeleteFHIRDatastore'


class XAmzTarget2(Enum):
    HealthLake_DescribeFHIRDatastore = 'HealthLake.DescribeFHIRDatastore'


class XAmzTarget3(Enum):
    HealthLake_DescribeFHIRExportJob = 'HealthLake.DescribeFHIRExportJob'


class XAmzTarget4(Enum):
    HealthLake_DescribeFHIRImportJob = 'HealthLake.DescribeFHIRImportJob'


class XAmzTarget5(Enum):
    HealthLake_ListFHIRDatastores = 'HealthLake.ListFHIRDatastores'


class XAmzTarget6(Enum):
    HealthLake_ListFHIRExportJobs = 'HealthLake.ListFHIRExportJobs'


class XAmzTarget7(Enum):
    HealthLake_ListFHIRImportJobs = 'HealthLake.ListFHIRImportJobs'


class XAmzTarget8(Enum):
    HealthLake_ListTagsForResource = 'HealthLake.ListTagsForResource'


class XAmzTarget9(Enum):
    HealthLake_StartFHIRExportJob = 'HealthLake.StartFHIRExportJob'


class XAmzTarget10(Enum):
    HealthLake_StartFHIRImportJob = 'HealthLake.StartFHIRImportJob'


class XAmzTarget11(Enum):
    HealthLake_TagResource = 'HealthLake.TagResource'


class XAmzTarget12(Enum):
    HealthLake_UntagResource = 'HealthLake.UntagResource'


class CreateFHIRDatastoreResponse(BaseModel):
    DatastoreArn_1: DatastoreArn = Field(..., alias='DatastoreArn')
    DatastoreEndpoint: BoundedLengthString
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    DatastoreStatus_1: DatastoreStatus = Field(..., alias='DatastoreStatus')


class DatastoreFilter(BaseModel):
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    DatastoreName_1: Optional[DatastoreName] = Field(None, alias='DatastoreName')
    DatastoreStatus_1: Optional[DatastoreStatus] = Field(None, alias='DatastoreStatus')


class DescribeFHIRExportJobRequest(BaseModel):
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeFHIRImportJobRequest(BaseModel):
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    JobId_1: JobId = Field(..., alias='JobId')


class InputDataConfig(BaseModel):
    S3Uri_1: Optional[S3Uri] = Field(None, alias='S3Uri')


class ListFHIRDatastoresRequest(BaseModel):
    Filter: Optional[DatastoreFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFHIRExportJobsRequest(BaseModel):
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SubmittedAfter: Optional[Timestamp] = None
    SubmittedBefore: Optional[Timestamp] = None


class ListFHIRImportJobsRequest(BaseModel):
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SubmittedAfter: Optional[Timestamp] = None
    SubmittedBefore: Optional[Timestamp] = None


class PreloadDataConfig(BaseModel):
    PreloadDataType_1: PreloadDataType = Field(..., alias='PreloadDataType')


class S3Configuration(BaseModel):
    KmsKeyId: EncryptionKeyID
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class CreateFHIRDatastoreRequest(BaseModel):
    ClientToken: Optional[ClientTokenString] = None
    DatastoreName_1: Optional[DatastoreName] = Field(None, alias='DatastoreName')
    DatastoreTypeVersion: FHIRVersion
    PreloadDataConfig_1: Optional[PreloadDataConfig] = Field(
        None, alias='PreloadDataConfig'
    )
    SseConfiguration_1: Optional[SseConfiguration] = Field(
        None, alias='SseConfiguration'
    )
    Tags: Optional[TagList] = None


class DatastoreProperties(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    DatastoreArn_1: DatastoreArn = Field(..., alias='DatastoreArn')
    DatastoreEndpoint: String
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    DatastoreName_1: Optional[DatastoreName] = Field(None, alias='DatastoreName')
    DatastoreStatus_1: DatastoreStatus = Field(..., alias='DatastoreStatus')
    DatastoreTypeVersion: FHIRVersion
    PreloadDataConfig_1: Optional[PreloadDataConfig] = Field(
        None, alias='PreloadDataConfig'
    )
    SseConfiguration_1: Optional[SseConfiguration] = Field(
        None, alias='SseConfiguration'
    )


class DatastorePropertiesList(RootModel[List[DatastoreProperties]]):
    root: List[DatastoreProperties]


class DescribeFHIRDatastoreResponse(BaseModel):
    DatastoreProperties_1: DatastoreProperties = Field(..., alias='DatastoreProperties')


class ListFHIRDatastoresResponse(BaseModel):
    DatastorePropertiesList_1: DatastorePropertiesList = Field(
        ..., alias='DatastorePropertiesList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class OutputDataConfig(BaseModel):
    S3Configuration_1: Optional[S3Configuration] = Field(None, alias='S3Configuration')


class StartFHIRExportJobRequest(BaseModel):
    ClientToken: ClientTokenString
    DataAccessRoleArn: IamRoleArn
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')


class StartFHIRImportJobRequest(BaseModel):
    ClientToken: ClientTokenString
    DataAccessRoleArn: IamRoleArn
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobOutputDataConfig: OutputDataConfig


class ExportJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    EndTime: Optional[Timestamp] = None
    JobId_1: JobId = Field(..., alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: JobStatus = Field(..., alias='JobStatus')
    Message_1: Optional[Message] = Field(None, alias='Message')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    SubmitTime: Timestamp


class ExportJobPropertiesList(RootModel[List[ExportJobProperties]]):
    root: List[ExportJobProperties]


class ImportJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    DatastoreId_1: DatastoreId = Field(..., alias='DatastoreId')
    EndTime: Optional[Timestamp] = None
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobId_1: JobId = Field(..., alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobOutputDataConfig: Optional[OutputDataConfig] = None
    JobStatus_1: JobStatus = Field(..., alias='JobStatus')
    Message_1: Optional[Message] = Field(None, alias='Message')
    SubmitTime: Timestamp


class ImportJobPropertiesList(RootModel[List[ImportJobProperties]]):
    root: List[ImportJobProperties]


class ListFHIRExportJobsResponse(BaseModel):
    ExportJobPropertiesList_1: ExportJobPropertiesList = Field(
        ..., alias='ExportJobPropertiesList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFHIRImportJobsResponse(BaseModel):
    ImportJobPropertiesList_1: ImportJobPropertiesList = Field(
        ..., alias='ImportJobPropertiesList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeFHIRExportJobResponse(BaseModel):
    ExportJobProperties_1: ExportJobProperties = Field(..., alias='ExportJobProperties')


class DescribeFHIRImportJobResponse(BaseModel):
    ImportJobProperties_1: ImportJobProperties = Field(..., alias='ImportJobProperties')
